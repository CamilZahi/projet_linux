# -*- coding: utf-8 -*-

{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "1bb545aa-cc28-4c99-9208-8ce2ba831c30",
   "metadata": {},
   "source": [
    "---\n",
    "---\n",
    "\n",
    "<img src=\"data/Pronosocker.png\" width=200px align=\"right\"></span>\n",
    "<img src=\"data/logoMoSEF.jpeg\" width=100px align=\"right\"></span>\n",
    "\n",
    "# <span style=\"background-color: \"> **_PROJET LINUX_** </span>\n",
    "\n",
    "### **Riche avec le foot**\n",
    "\n",
    "<div style=\"text-align:right;\"Novembre 2022 - Décembre 2022</div>\n",
    "\n",
    "##### <div style=\"text-align:right;\">Projet réalisé par : Anis Louissi, Camil Zahi</div>\n",
    "---\n",
    "---"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "f42cc932-e4ef-4ea1-95f8-14b01d9a21fd",
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import numpy as np\n",
    "import seaborn as sns\n",
    "from sklearn.ensemble import RandomForestClassifier\n",
    "from sklearn.tree import DecisionTreeClassifier\n",
    "from sklearn.naive_bayes import GaussianNB\n",
    "from sklearn.linear_model import LogisticRegression\n",
    "from sklearn import linear_model\n",
    "from sklearn.svm import SVC\n",
    "from sklearn.metrics import classification_report\n",
    "import pandas as pd\n",
    "import numpy as np\n",
    "from sklearn.model_selection import train_test_split\n",
    "from sklearn.preprocessing import LabelEncoder\n",
    "from time import time\n",
    "from sklearn.metrics import f1_score"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "c34e4e6b",
   "metadata": {},
   "outputs": [],
   "source": [
    "df1 = pd.read_csv(\"data/2007-2008.csv\")\n",
    "df2 = pd.read_csv(\"data/2008-2009.csv\")\n",
    "df3 = pd.read_csv(\"data/2009-2010.csv\")\n",
    "df4 = pd.read_csv(\"data/2010-2011.csv\")\n",
    "df5 = pd.read_csv(\"data/2011-2012.csv\")\n",
    "df6 = pd.read_csv(\"data/2012-2013.csv\")\n",
    "df7 = pd.read_csv(\"data/2013-2014.csv\")\n",
    "df8 = pd.read_csv(\"data/2014-2015.csv\")\n",
    "df7 = pd.read_csv(\"data/2015-2016.csv\")\n",
    "df9 = pd.read_csv(\"data/2016-2017.csv\")\n",
    "df10 = pd.read_csv(\"data/2017-2018.csv\")\n",
    "df11 = pd.read_csv(\"data/2018-2019.csv\")\n",
    "df12 = pd.read_csv(\"data/2019-2020.csv\")\n",
    "df13 = pd.read_csv(\"data/2020-2021.csv\")\n",
    "df14 = pd.read_csv(\"data/2021-2022.csv\")\n",
    "df15 = pd.read_csv(\"data/2022-2023.csv\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "6fd1e86c",
   "metadata": {},
   "outputs": [],
   "source": [
    "data = pd.concat([df1,df2,df3,df4,df5,df6,df7,df8,df9,df10,df11,df12,df13,df14,df15])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "c874a5b8",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Div</th>\n",
       "      <th>Date</th>\n",
       "      <th>HomeTeam</th>\n",
       "      <th>AwayTeam</th>\n",
       "      <th>FTHG</th>\n",
       "      <th>FTAG</th>\n",
       "      <th>FTR</th>\n",
       "      <th>HTHG</th>\n",
       "      <th>HTAG</th>\n",
       "      <th>HTR</th>\n",
       "      <th>...</th>\n",
       "      <th>AvgC&lt;2.5</th>\n",
       "      <th>AHCh</th>\n",
       "      <th>B365CAHH</th>\n",
       "      <th>B365CAHA</th>\n",
       "      <th>PCAHH</th>\n",
       "      <th>PCAHA</th>\n",
       "      <th>MaxCAHH</th>\n",
       "      <th>MaxCAHA</th>\n",
       "      <th>AvgCAHH</th>\n",
       "      <th>AvgCAHA</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>F1</td>\n",
       "      <td>04/08/07</td>\n",
       "      <td>Bordeaux</td>\n",
       "      <td>Lens</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>H</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>H</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>F1</td>\n",
       "      <td>04/08/07</td>\n",
       "      <td>Caen</td>\n",
       "      <td>Nice</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>H</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>D</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>F1</td>\n",
       "      <td>04/08/07</td>\n",
       "      <td>Lille</td>\n",
       "      <td>Lorient</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>D</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>D</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>F1</td>\n",
       "      <td>04/08/07</td>\n",
       "      <td>Monaco</td>\n",
       "      <td>St Etienne</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>D</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>H</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>F1</td>\n",
       "      <td>04/08/07</td>\n",
       "      <td>Paris SG</td>\n",
       "      <td>Sochaux</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>D</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>D</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>145</th>\n",
       "      <td>F1</td>\n",
       "      <td>13/11/2022</td>\n",
       "      <td>Lille</td>\n",
       "      <td>Angers</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>H</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>H</td>\n",
       "      <td>...</td>\n",
       "      <td>2.45</td>\n",
       "      <td>-1.75</td>\n",
       "      <td>1.97</td>\n",
       "      <td>1.93</td>\n",
       "      <td>2.01</td>\n",
       "      <td>1.89</td>\n",
       "      <td>2.01</td>\n",
       "      <td>1.96</td>\n",
       "      <td>1.97</td>\n",
       "      <td>1.88</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>146</th>\n",
       "      <td>F1</td>\n",
       "      <td>13/11/2022</td>\n",
       "      <td>Montpellier</td>\n",
       "      <td>Reims</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>D</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>D</td>\n",
       "      <td>...</td>\n",
       "      <td>1.85</td>\n",
       "      <td>0.00</td>\n",
       "      <td>2.06</td>\n",
       "      <td>1.84</td>\n",
       "      <td>2.11</td>\n",
       "      <td>1.83</td>\n",
       "      <td>2.11</td>\n",
       "      <td>1.89</td>\n",
       "      <td>2.02</td>\n",
       "      <td>1.84</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>147</th>\n",
       "      <td>F1</td>\n",
       "      <td>13/11/2022</td>\n",
       "      <td>Nantes</td>\n",
       "      <td>Ajaccio</td>\n",
       "      <td>2.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>D</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>D</td>\n",
       "      <td>...</td>\n",
       "      <td>1.59</td>\n",
       "      <td>-0.25</td>\n",
       "      <td>1.85</td>\n",
       "      <td>2.05</td>\n",
       "      <td>1.86</td>\n",
       "      <td>2.08</td>\n",
       "      <td>1.87</td>\n",
       "      <td>2.08</td>\n",
       "      <td>1.83</td>\n",
       "      <td>2.03</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>148</th>\n",
       "      <td>F1</td>\n",
       "      <td>13/11/2022</td>\n",
       "      <td>Strasbourg</td>\n",
       "      <td>Lorient</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>D</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>A</td>\n",
       "      <td>...</td>\n",
       "      <td>1.93</td>\n",
       "      <td>-0.25</td>\n",
       "      <td>2.05</td>\n",
       "      <td>1.85</td>\n",
       "      <td>2.09</td>\n",
       "      <td>1.85</td>\n",
       "      <td>2.09</td>\n",
       "      <td>1.88</td>\n",
       "      <td>2.03</td>\n",
       "      <td>1.83</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>149</th>\n",
       "      <td>F1</td>\n",
       "      <td>13/11/2022</td>\n",
       "      <td>Monaco</td>\n",
       "      <td>Marseille</td>\n",
       "      <td>2.0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>A</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>D</td>\n",
       "      <td>...</td>\n",
       "      <td>2.17</td>\n",
       "      <td>-0.25</td>\n",
       "      <td>2.05</td>\n",
       "      <td>1.85</td>\n",
       "      <td>2.09</td>\n",
       "      <td>1.85</td>\n",
       "      <td>2.09</td>\n",
       "      <td>1.88</td>\n",
       "      <td>2.02</td>\n",
       "      <td>1.84</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5370 rows × 138 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "    Div        Date     HomeTeam    AwayTeam  FTHG  FTAG FTR  HTHG  HTAG HTR  \\\n",
       "0    F1    04/08/07     Bordeaux        Lens   1.0   0.0   H   1.0   0.0   H   \n",
       "1    F1    04/08/07         Caen        Nice   1.0   0.0   H   0.0   0.0   D   \n",
       "2    F1    04/08/07        Lille     Lorient   0.0   0.0   D   0.0   0.0   D   \n",
       "3    F1    04/08/07       Monaco  St Etienne   1.0   1.0   D   1.0   0.0   H   \n",
       "4    F1    04/08/07     Paris SG     Sochaux   0.0   0.0   D   0.0   0.0   D   \n",
       "..   ..         ...          ...         ...   ...   ...  ..   ...   ...  ..   \n",
       "145  F1  13/11/2022        Lille      Angers   1.0   0.0   H   1.0   0.0   H   \n",
       "146  F1  13/11/2022  Montpellier       Reims   1.0   1.0   D   0.0   0.0   D   \n",
       "147  F1  13/11/2022       Nantes     Ajaccio   2.0   2.0   D   0.0   0.0   D   \n",
       "148  F1  13/11/2022   Strasbourg     Lorient   1.0   1.0   D   0.0   1.0   A   \n",
       "149  F1  13/11/2022       Monaco   Marseille   2.0   3.0   A   1.0   1.0   D   \n",
       "\n",
       "     ...  AvgC<2.5  AHCh  B365CAHH  B365CAHA  PCAHH  PCAHA  MaxCAHH  MaxCAHA  \\\n",
       "0    ...       NaN   NaN       NaN       NaN    NaN    NaN      NaN      NaN   \n",
       "1    ...       NaN   NaN       NaN       NaN    NaN    NaN      NaN      NaN   \n",
       "2    ...       NaN   NaN       NaN       NaN    NaN    NaN      NaN      NaN   \n",
       "3    ...       NaN   NaN       NaN       NaN    NaN    NaN      NaN      NaN   \n",
       "4    ...       NaN   NaN       NaN       NaN    NaN    NaN      NaN      NaN   \n",
       "..   ...       ...   ...       ...       ...    ...    ...      ...      ...   \n",
       "145  ...      2.45 -1.75      1.97      1.93   2.01   1.89     2.01     1.96   \n",
       "146  ...      1.85  0.00      2.06      1.84   2.11   1.83     2.11     1.89   \n",
       "147  ...      1.59 -0.25      1.85      2.05   1.86   2.08     1.87     2.08   \n",
       "148  ...      1.93 -0.25      2.05      1.85   2.09   1.85     2.09     1.88   \n",
       "149  ...      2.17 -0.25      2.05      1.85   2.09   1.85     2.09     1.88   \n",
       "\n",
       "     AvgCAHH  AvgCAHA  \n",
       "0        NaN      NaN  \n",
       "1        NaN      NaN  \n",
       "2        NaN      NaN  \n",
       "3        NaN      NaN  \n",
       "4        NaN      NaN  \n",
       "..       ...      ...  \n",
       "145     1.97     1.88  \n",
       "146     2.02     1.84  \n",
       "147     1.83     2.03  \n",
       "148     2.03     1.83  \n",
       "149     2.02     1.84  \n",
       "\n",
       "[5370 rows x 138 columns]"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "161757fd",
   "metadata": {},
   "outputs": [],
   "source": [
    "data.to_csv(\"base.csv\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "88d824a5-3bb9-4706-9b84-53875a75e7a1",
   "metadata": {},
   "outputs": [],
   "source": [
    "#data = pd.read_csv('data/base.csv')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "c1714b7b",
   "metadata": {},
   "outputs": [],
   "source": [
    "#data.drop(columns = 'Unnamed: 0', axis = 1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "d1476f27",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "Int64Index: 5370 entries, 0 to 149\n",
      "Columns: 138 entries, Div to AvgCAHA\n",
      "dtypes: float64(131), object(7)\n",
      "memory usage: 5.7+ MB\n"
     ]
    }
   ],
   "source": [
    "data.info()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a01f7c2b",
   "metadata": {},
   "source": [
    "## Fonctions utiles pour notre modélisation"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "d1432e60",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Echantillon d'entrainement\n",
    "def model_entrainement(clf, X_train, y_train):\n",
    "    start = time()\n",
    "    clf.fit(X_train, y_train)\n",
    "    end = time()\n",
    "    print(\"Modèle d'apprentissage {:2f} seconds\".format(end-start))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "d78814b1",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Fonctions réalisant nos prédictions\n",
    "def predict_labels(clf, features, target):\n",
    "    start = time()\n",
    "    y_pred = clf.predict(features)\n",
    "    end = time()\n",
    "    print(\"Etablis nos prédictions en {:2f} seconds\".format(end-start))\n",
    "\n",
    "    acc = sum(target == y_pred) / float(len(y_pred))\n",
    "\n",
    "    return f1_score(target, y_pred, average='micro'), acc"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "45393be8",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Nos scores de modèles sur échantillons d'apprentissage et échantillon de test\n",
    "def model(clf, X_train, y_train, X_test, y_test):\n",
    "    model_entrainement(clf, X_train, y_train)\n",
    "\n",
    "    f1, acc = predict_labels(clf, X_train, y_train)\n",
    "    print(\"train set:\")\n",
    "    print(\"-\" * 20)\n",
    "    print(\"F1 Score:{}\".format(f1))\n",
    "    print(\"Accuracy:{}\".format(acc))\n",
    "\n",
    "    f1, acc = predict_labels(clf, X_test, y_test)\n",
    "    print(\"test set:\")\n",
    "    print(\"-\" * 20)\n",
    "    print(\"F1 Score:{}\".format(f1))\n",
    "    print(\"Accuracy:{}\".format(acc))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "31ae77e3",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Définition de nos variables utiles pour réaliser nos prédictions\n",
    "vars_X = ['home_encoded', 'away_encoded', 'HTHG', 'HTAG', 'HS',\n",
    "                'AS', 'HST', 'AST', 'HR', 'AR']\n",
    "var_Y = ['FTR']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "44621d36",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Notre périmètre de modélisation\n",
    "features = vars_X + var_Y"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "fc892601",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "<ipython-input-14-07fb2dec02a6>:6: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  data['home_encoded'] = home_encoded\n",
      "<ipython-input-14-07fb2dec02a6>:12: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  data['away_encoded'] = away_encoded\n"
     ]
    }
   ],
   "source": [
    "# Encodage nécessaire pour nos variables témoignant des équipes \n",
    "encoder = LabelEncoder()\n",
    "home_encoded = encoder.fit_transform(data['HomeTeam'])\n",
    "home_encoded_mapping = dict(\n",
    "    zip(encoder.classes_, encoder.transform(encoder.classes_).tolist()))\n",
    "data['home_encoded'] = home_encoded\n",
    "\n",
    "encoder = LabelEncoder()\n",
    "away_encoded = encoder.fit_transform(data['AwayTeam'])\n",
    "away_encoded_mapping = dict(\n",
    "    zip(encoder.classes_, encoder.transform(encoder.classes_).tolist()))\n",
    "data['away_encoded'] = away_encoded"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "7f3c6656",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>home_encoded</th>\n",
       "      <th>away_encoded</th>\n",
       "      <th>HTHG</th>\n",
       "      <th>HTAG</th>\n",
       "      <th>HS</th>\n",
       "      <th>AS</th>\n",
       "      <th>HST</th>\n",
       "      <th>AST</th>\n",
       "      <th>HR</th>\n",
       "      <th>AR</th>\n",
       "      <th>FTR</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>7</td>\n",
       "      <td>18</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>13.0</td>\n",
       "      <td>4.0</td>\n",
       "      <td>4.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>H</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>10</td>\n",
       "      <td>28</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>16.0</td>\n",
       "      <td>14.0</td>\n",
       "      <td>6.0</td>\n",
       "      <td>4.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>H</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>19</td>\n",
       "      <td>20</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>6.0</td>\n",
       "      <td>5.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>D</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>24</td>\n",
       "      <td>34</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>16.0</td>\n",
       "      <td>19.0</td>\n",
       "      <td>5.0</td>\n",
       "      <td>6.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>D</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>30</td>\n",
       "      <td>33</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>11.0</td>\n",
       "      <td>8.0</td>\n",
       "      <td>10.0</td>\n",
       "      <td>5.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>D</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>145</th>\n",
       "      <td>19</td>\n",
       "      <td>3</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>9.0</td>\n",
       "      <td>8.0</td>\n",
       "      <td>4.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>H</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>146</th>\n",
       "      <td>25</td>\n",
       "      <td>31</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>16.0</td>\n",
       "      <td>17.0</td>\n",
       "      <td>8.0</td>\n",
       "      <td>4.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>D</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>147</th>\n",
       "      <td>27</td>\n",
       "      <td>0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>15.0</td>\n",
       "      <td>13.0</td>\n",
       "      <td>5.0</td>\n",
       "      <td>4.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>D</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>148</th>\n",
       "      <td>35</td>\n",
       "      <td>20</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>20.0</td>\n",
       "      <td>6.0</td>\n",
       "      <td>4.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>D</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>149</th>\n",
       "      <td>24</td>\n",
       "      <td>22</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>11.0</td>\n",
       "      <td>11.0</td>\n",
       "      <td>6.0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>A</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5370 rows × 11 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "     home_encoded  away_encoded  HTHG  HTAG    HS    AS   HST  AST   HR   AR  \\\n",
       "0               7            18   1.0   0.0  13.0   4.0   4.0  2.0  0.0  1.0   \n",
       "1              10            28   0.0   0.0  16.0  14.0   6.0  4.0  0.0  0.0   \n",
       "2              19            20   0.0   0.0   6.0   5.0   2.0  3.0  0.0  0.0   \n",
       "3              24            34   1.0   0.0  16.0  19.0   5.0  6.0  0.0  0.0   \n",
       "4              30            33   0.0   0.0  11.0   8.0  10.0  5.0  0.0  0.0   \n",
       "..            ...           ...   ...   ...   ...   ...   ...  ...  ...  ...   \n",
       "145            19             3   1.0   0.0   9.0   8.0   4.0  2.0  1.0  0.0   \n",
       "146            25            31   0.0   0.0  16.0  17.0   8.0  4.0  0.0  0.0   \n",
       "147            27             0   0.0   0.0  15.0  13.0   5.0  4.0  0.0  0.0   \n",
       "148            35            20   0.0   1.0  20.0   6.0   4.0  2.0  0.0  0.0   \n",
       "149            24            22   1.0   1.0  11.0  11.0   6.0  3.0  0.0  0.0   \n",
       "\n",
       "    FTR  \n",
       "0     H  \n",
       "1     H  \n",
       "2     D  \n",
       "3     D  \n",
       "4     D  \n",
       "..   ..  \n",
       "145   H  \n",
       "146   D  \n",
       "147   D  \n",
       "148   D  \n",
       "149   A  \n",
       "\n",
       "[5370 rows x 11 columns]"
      ]
     },
     "execution_count": 15,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data = data[features]\n",
    "data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "232f6e7c",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "Int64Index: 5370 entries, 0 to 149\n",
      "Data columns (total 11 columns):\n",
      " #   Column        Non-Null Count  Dtype  \n",
      "---  ------        --------------  -----  \n",
      " 0   home_encoded  5370 non-null   int32  \n",
      " 1   away_encoded  5370 non-null   int32  \n",
      " 2   HTHG          5368 non-null   float64\n",
      " 3   HTAG          5368 non-null   float64\n",
      " 4   HS            5368 non-null   float64\n",
      " 5   AS            5368 non-null   float64\n",
      " 6   HST           5368 non-null   float64\n",
      " 7   AST           5368 non-null   float64\n",
      " 8   HR            5368 non-null   float64\n",
      " 9   AR            5368 non-null   float64\n",
      " 10  FTR           5369 non-null   object \n",
      "dtypes: float64(8), int32(2), object(1)\n",
      "memory usage: 461.5+ KB\n"
     ]
    }
   ],
   "source": [
    "data.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "522db691",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "home_encoded    0\n",
       "away_encoded    0\n",
       "HTHG            2\n",
       "HTAG            2\n",
       "HS              2\n",
       "AS              2\n",
       "HST             2\n",
       "AST             2\n",
       "HR              2\n",
       "AR              2\n",
       "FTR             1\n",
       "dtype: int64"
      ]
     },
     "execution_count": 17,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Analyse des valeurs manquantes\n",
    "data.isna().sum()\n",
    "# Possiblement 2 observations à supprimer"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "b2876b9e",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "     home_encoded  away_encoded  HTHG  HTAG  HS  AS  HST  AST  HR  AR  FTR\n",
      "380            39            39   NaN   NaN NaN NaN  NaN  NaN NaN NaN  NaN\n",
      "325             6            21   NaN   NaN NaN NaN  NaN  NaN NaN NaN    A\n"
     ]
    }
   ],
   "source": [
    "# Suppression de nos observations manquantes\n",
    "print(data[data.isna().any(axis=1)])\n",
    "data = data.dropna(axis=0)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ea0658b0",
   "metadata": {},
   "source": [
    "##  Modélisation"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "29679291",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Variables explicatives et variable à expliquer\n",
    "X = data[vars_X]\n",
    "Y = data['FTR']\n",
    "\n",
    "# Séparation en 2 échantillons un d'apprentissage et un de test\n",
    "X_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size=0.2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "609c0a6b",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Préparation de nos algorithmes de Machine Learning choisis\n",
    "lr_classifier1 = LogisticRegression(multi_class='ovr', max_iter=500)\n",
    "lr_classifier2 = linear_model.LogisticRegression(C=1.0,max_iter=500)\n",
    "nbClassifier = GaussianNB()\n",
    "rfClassifier = RandomForestClassifier()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "c39094f0",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Régression logistique 1\n",
      "--------------------\n",
      "Modèle d'apprentissage 0.201856 seconds\n",
      "Etablis nos prédictions en 0.037132 seconds\n",
      "train set:\n",
      "--------------------\n",
      "F1 Score:0.6490451793199814\n",
      "Accuracy:0.6490451793199814\n",
      "Etablis nos prédictions en 0.000977 seconds\n",
      "test set:\n",
      "--------------------\n",
      "F1 Score:0.6359404096834265\n",
      "Accuracy:0.6359404096834265\n",
      "\n",
      "Régression logistique 2\n",
      "--------------------\n",
      "Modèle d'apprentissage 0.439104 seconds\n",
      "Etablis nos prédictions en 0.000977 seconds\n",
      "train set:\n",
      "--------------------\n",
      "F1 Score:0.6460176991150443\n",
      "Accuracy:0.6460176991150443\n",
      "Etablis nos prédictions en 0.000978 seconds\n",
      "test set:\n",
      "--------------------\n",
      "F1 Score:0.6396648044692738\n",
      "Accuracy:0.6396648044692738\n",
      "\n",
      "Classification naive Bayésienne\n",
      "--------------------\n",
      "Modèle d'apprentissage 0.003908 seconds\n",
      "Etablis nos prédictions en 0.001955 seconds\n",
      "train set:\n",
      "--------------------\n",
      "F1 Score:0.6178388448998603\n",
      "Accuracy:0.6178388448998603\n",
      "Etablis nos prédictions en 0.000976 seconds\n",
      "test set:\n",
      "--------------------\n",
      "F1 Score:0.6070763500931099\n",
      "Accuracy:0.6070763500931099\n",
      "\n",
      "Forêts aléatoires\n",
      "--------------------\n",
      "Modèle d'apprentissage 0.383040 seconds\n",
      "Etablis nos prédictions en 0.057651 seconds\n",
      "train set:\n",
      "--------------------\n",
      "F1 Score:1.0\n",
      "Accuracy:1.0\n",
      "Etablis nos prédictions en 0.024385 seconds\n",
      "test set:\n",
      "--------------------\n",
      "F1 Score:0.6201117318435754\n",
      "Accuracy:0.6201117318435754\n"
     ]
    }
   ],
   "source": [
    "# Résultats de nos différents modèles\n",
    "print()\n",
    "print(\"Régression logistique 1\")\n",
    "print(\"-\" * 20)\n",
    "model(lr_classifier1, X_train, Y_train, X_test, Y_test)\n",
    "\n",
    "print()\n",
    "print(\"Régression logistique 2\")\n",
    "print(\"-\" * 20)\n",
    "model(lr_classifier2, X_train, Y_train, X_test, Y_test)\n",
    "\n",
    "print()\n",
    "print(\"Classification naive Bayésienne\")\n",
    "print(\"-\" * 20)\n",
    "model(nbClassifier, X_train, Y_train, X_test, Y_test)\n",
    "\n",
    "print()\n",
    "print(\"Forêts aléatoires\")\n",
    "print(\"-\" * 20)\n",
    "model(rfClassifier, X_train, Y_train, X_test, Y_test)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1f4d07a1",
   "metadata": {},
   "source": [
    "## On sélectionne une année pour nous intéresser maintenant aux paris sportifs"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "c9300d01",
   "metadata": {},
   "outputs": [],
   "source": [
    "df = pd.read_csv(\"data/2017-2018.csv\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "5c4a280b",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "    Div      Date  HomeTeam  AwayTeam  FTHG  FTAG FTR  HTHG  HTAG HTR  ...  \\\n",
      "148  F1  29/11/17  Paris SG    Troyes     2     0   H     0     0   D  ...   \n",
      "285  F1  10/03/18  Paris SG      Metz     5     0   H     4     0   H  ...   \n",
      "346  F1  28/04/18    Troyes      Caen     3     1   H     2     1   H  ...   \n",
      "348  F1  29/04/18  Paris SG  Guingamp     2     2   D     0     1   A  ...   \n",
      "\n",
      "     BbAv<2.5  BbAH  BbAHh  BbMxAHH  BbAvAHH  BbMxAHA  BbAvAHA  PSCH   PSCD  \\\n",
      "148      4.80    16  -3.25     1.94     1.90     2.02     1.96  1.04  18.83   \n",
      "285      4.49    16  -2.75     2.00     1.93     1.94     1.90  1.08  16.94   \n",
      "346      1.60    17  -0.25     1.94     1.90     1.99     1.96  2.53   3.18   \n",
      "348      3.93    13  -3.00     2.28     2.17     1.83     1.69  1.10  11.51   \n",
      "\n",
      "      PSCA  \n",
      "148  50.86  \n",
      "285  21.56  \n",
      "346   3.17  \n",
      "348  26.62  \n",
      "\n",
      "[4 rows x 64 columns]\n"
     ]
    }
   ],
   "source": [
    "# Suppression de nos observations manquantes\n",
    "print(df[df.isna().any(axis=1)])\n",
    "df = df.dropna(axis=0)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "ecf535ee",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Sélectionner les colonnes d'entrée\n",
    "df['HTR'] = df['HTR'].replace({\"H\": 0, \"D\": 1, \"A\": 2})\n",
    "X = df[['HTHG', 'HTAG', 'HS', 'AS', 'HTR']]\n",
    "\n",
    "# Créer la variable cible en codant la colonne FTR en valeurs numériques\n",
    "y = df['FTR'].replace({\"H\": 0, \"D\": 1, \"A\": 2})\n",
    "y = y.astype(float)\n",
    "# Séparer le dataframe en jeu d'entraînement et jeu de test\n",
    "X_train2, X_test2, y_train2, y_test2 = train_test_split(X, y, test_size=0.2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "aa12b8f1",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[[8.99354207e-01 7.75300006e-02 2.31157924e-02]\n",
      " [4.36665703e-02 2.36906952e-01 7.19426478e-01]\n",
      " [6.26827101e-01 3.04362036e-01 6.88108630e-02]\n",
      " [6.53877248e-01 2.50642242e-01 9.54805101e-02]\n",
      " [4.69147649e-01 3.08873303e-01 2.21979048e-01]\n",
      " [4.00043653e-01 3.18441180e-01 2.81515168e-01]\n",
      " [1.64269108e-01 3.05736556e-01 5.29994336e-01]\n",
      " [5.15491524e-01 2.91283313e-01 1.93225163e-01]\n",
      " [2.57953254e-01 2.56394336e-01 4.85652411e-01]\n",
      " [9.09883715e-01 5.26780714e-02 3.74382140e-02]\n",
      " [2.31220833e-02 2.70314014e-01 7.06563903e-01]\n",
      " [3.09417055e-01 3.09023398e-01 3.81559547e-01]\n",
      " [8.89540906e-01 1.01770821e-01 8.68827256e-03]\n",
      " [9.90126142e-01 9.41109442e-03 4.62763312e-04]\n",
      " [2.41952169e-01 2.70022171e-01 4.88025660e-01]\n",
      " [3.34110284e-01 3.47929235e-01 3.17960480e-01]\n",
      " [7.34451099e-01 2.25463035e-01 4.00858656e-02]\n",
      " [3.41581242e-01 4.69822412e-01 1.88596346e-01]\n",
      " [6.13143636e-01 2.73840082e-01 1.13016282e-01]\n",
      " [3.32670850e-01 4.05576027e-01 2.61753123e-01]\n",
      " [9.79193557e-01 2.01772187e-02 6.29224243e-04]\n",
      " [4.57644361e-02 2.68648898e-01 6.85586666e-01]\n",
      " [5.99641217e-01 2.21846820e-01 1.78511964e-01]\n",
      " [9.95801390e-01 4.12974914e-03 6.88611191e-05]\n",
      " [3.34110284e-01 3.47929235e-01 3.17960480e-01]\n",
      " [5.71424926e-01 2.77894435e-01 1.50680639e-01]\n",
      " [7.20023320e-01 2.19978040e-01 5.99986400e-02]\n",
      " [2.72585148e-01 2.71689558e-01 4.55725294e-01]\n",
      " [3.43199681e-01 2.51281660e-01 4.05518659e-01]\n",
      " [4.74849000e-01 1.87751209e-01 3.37399792e-01]\n",
      " [4.27523550e-01 3.85005924e-01 1.87470526e-01]\n",
      " [5.16523252e-01 2.49303000e-01 2.34173748e-01]\n",
      " [2.41952169e-01 2.70022171e-01 4.88025660e-01]\n",
      " [6.37016327e-01 2.53386146e-01 1.09597527e-01]\n",
      " [6.26763806e-01 2.04232945e-01 1.69003249e-01]\n",
      " [7.23136933e-01 2.30360106e-01 4.65029614e-02]\n",
      " [6.42327510e-01 2.36135129e-01 1.21537361e-01]\n",
      " [5.51228695e-01 2.97658042e-01 1.51113262e-01]\n",
      " [8.22980838e-01 1.35779995e-01 4.12391670e-02]\n",
      " [3.96633367e-01 4.33937646e-01 1.69428987e-01]\n",
      " [7.72313821e-01 1.59869327e-01 6.78168523e-02]\n",
      " [4.12690197e-01 3.29419524e-01 2.57890279e-01]\n",
      " [7.85026871e-01 1.24661094e-01 9.03120342e-02]\n",
      " [5.12235626e-01 3.13178603e-01 1.74585772e-01]\n",
      " [7.82872732e-01 1.76185609e-01 4.09416590e-02]\n",
      " [8.41700685e-01 1.40204884e-01 1.80944304e-02]\n",
      " [3.73791282e-01 2.85362595e-01 3.40846123e-01]\n",
      " [3.59265316e-01 2.63774342e-01 3.76960342e-01]\n",
      " [1.44636801e-01 3.35612325e-01 5.19750874e-01]\n",
      " [1.22135724e-01 2.82829981e-01 5.95034295e-01]\n",
      " [8.98723384e-02 1.86020411e-01 7.24107250e-01]\n",
      " [9.06244440e-01 7.84989905e-02 1.52565700e-02]\n",
      " [5.98420251e-02 3.52974173e-01 5.87183802e-01]\n",
      " [8.92686456e-01 6.51550220e-02 4.21585218e-02]\n",
      " [8.26982600e-01 1.48337297e-01 2.46801038e-02]\n",
      " [8.32279077e-01 1.32324657e-01 3.53962660e-02]\n",
      " [6.17777989e-02 2.74140240e-01 6.64081961e-01]\n",
      " [4.20328107e-01 4.62068342e-01 1.17603551e-01]\n",
      " [1.62881232e-01 4.26395220e-01 4.10723548e-01]\n",
      " [4.80685584e-01 3.17347635e-01 2.01966781e-01]\n",
      " [7.47932412e-01 1.88089437e-01 6.39781512e-02]\n",
      " [9.57878053e-01 3.88262000e-02 3.29574711e-03]\n",
      " [4.42900348e-01 2.58460787e-01 2.98638865e-01]\n",
      " [4.87718575e-01 2.25763101e-01 2.86518324e-01]\n",
      " [5.99273601e-01 2.81627393e-01 1.19099006e-01]\n",
      " [9.91487550e-02 3.15818242e-01 5.85033003e-01]\n",
      " [7.60490007e-01 1.84298288e-01 5.52117047e-02]\n",
      " [9.35494572e-01 6.02651008e-02 4.24032678e-03]\n",
      " [4.46429205e-01 3.87423273e-01 1.66147522e-01]\n",
      " [7.34350470e-01 1.91637145e-01 7.40123846e-02]\n",
      " [6.30979658e-02 4.71451130e-01 4.65450904e-01]\n",
      " [5.10043976e-01 2.10275561e-01 2.79680463e-01]\n",
      " [6.82399462e-01 2.15310894e-01 1.02289644e-01]\n",
      " [1.94047791e-01 3.09972684e-01 4.95979524e-01]\n",
      " [2.43856143e-01 4.91675745e-01 2.64468112e-01]\n",
      " [7.96505805e-01 1.53112892e-01 5.03813026e-02]]\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\aloui\\anaconda3\\lib\\site-packages\\sklearn\\linear_model\\_logistic.py:763: ConvergenceWarning: lbfgs failed to converge (status=1):\n",
      "STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.\n",
      "\n",
      "Increase the number of iterations (max_iter) or scale the data as shown in:\n",
      "    https://scikit-learn.org/stable/modules/preprocessing.html\n",
      "Please also refer to the documentation for alternative solver options:\n",
      "    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression\n",
      "  n_iter_i = _check_optimize_result(\n"
     ]
    }
   ],
   "source": [
    "# Entraîner un modèle de régression logistique\n",
    "lr = linear_model.LogisticRegression(C=1.0)\n",
    "lr.fit(X_train2, y_train2)\n",
    "\n",
    "# Prédire les classes pour les données de test\n",
    "y_pred = lr.predict(X_test2)\n",
    "\n",
    "# Calculez les probabilités de chaque classe\n",
    "y_proba = lr.predict_proba(X_test2)\n",
    "\n",
    "# Afficher les probabilités de chaque classe\n",
    "print(y_proba)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "f9470631",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Accuracy : 0.631578947368421\n"
     ]
    }
   ],
   "source": [
    "# Calculer l'accuracy des prédictions\n",
    "accuracy = (y_pred == y_test2).mean()\n",
    "print(\"Accuracy :\", accuracy)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "80c73543",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.0    36\n",
       "2.0    22\n",
       "1.0    18\n",
       "Name: FTR, dtype: int64"
      ]
     },
     "execution_count": 27,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "y_test2.value_counts()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "id": "ccc18a92",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(853.1999999999999, 36, 28)"
      ]
     },
     "execution_count": 28,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "def simulate_year_of_bets(df, y_pred, y_test2, bet_amount=5):\n",
    "    # Initialiser notre compteur de départ\n",
    "    total_winnings = 0\n",
    "    # Initialiser le compteur de paris gagnants et perdus à 0\n",
    "    win_count = 0\n",
    "    loss_count = 0\n",
    "\n",
    "    # Pour chaque pari et chaque prédiction\n",
    "    for i, prediction in enumerate(y_pred):\n",
    "        # Récupérer les cotes de chaque événement\n",
    "        home_win_odds = df.iloc[i]['B365H']\n",
    "        away_win_odds = df.iloc[i]['B365A']\n",
    "        draw_odds = df.iloc[i]['B365D']\n",
    "        \n",
    "        # Vérifier si la prédiction est correcte\n",
    "        if prediction == y_test2.iloc[i]:\n",
    "            # Si la prédiction est correcte, on parie sur l'événement correspondant\n",
    "            if prediction == 0.0:\n",
    "                total_winnings += home_win_odds * bet_amount\n",
    "                win_count += 1\n",
    "            elif prediction == 1.0:\n",
    "                total_winnings += draw_odds * bet_amount\n",
    "                win_count += 1\n",
    "            elif prediction == 2.0:\n",
    "                total_winnings += away_win_odds * bet_amount\n",
    "                win_count\n",
    "               # Sinon, on perd la mise et on compte un pari perdu\n",
    "            \n",
    "        else:\n",
    "            total_winnings -= bet_amount\n",
    "            loss_count += 1\n",
    "    \n",
    "    # On retourne le compteur de gains et les compteurs de paris gagnants et perdus à la fin de l'année de paris\n",
    "    return total_winnings, win_count, loss_count\n",
    "\n",
    "# Appeler la fonction pour simuler une année de paris\n",
    "simulate_year_of_bets(df, y_pred, y_test2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "id": "88bd23ad-0506-43be-9cb7-48b4ba512566",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th>Classe prédite</th>\n",
       "      <th>0.0</th>\n",
       "      <th>1.0</th>\n",
       "      <th>2.0</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Classe réelle</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0.0</th>\n",
       "      <td>32</td>\n",
       "      <td>0</td>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1.0</th>\n",
       "      <td>12</td>\n",
       "      <td>4</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2.0</th>\n",
       "      <td>5</td>\n",
       "      <td>5</td>\n",
       "      <td>12</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "Classe prédite  0.0  1.0  2.0\n",
       "Classe réelle                \n",
       "0.0              32    0    4\n",
       "1.0              12    4    2\n",
       "2.0               5    5   12"
      ]
     },
     "execution_count": 29,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "cm = pd.crosstab(y_test2, y_pred, rownames=['Classe réelle'], colnames=['Classe prédite'])\n",
    "cm"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "id": "9f66637f-313d-4260-8d07-47f23edf559f",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.631578947368421"
      ]
     },
     "execution_count": 30,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "lr.score(X_test2, y_test2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "id": "e19a128b-f429-45b3-9c41-98e40b5bedcc",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "              precision    recall  f1-score   support\n",
      "\n",
      "         0.0       0.65      0.89      0.75        36\n",
      "         1.0       0.44      0.22      0.30        18\n",
      "         2.0       0.67      0.55      0.60        22\n",
      "\n",
      "    accuracy                           0.63        76\n",
      "   macro avg       0.59      0.55      0.55        76\n",
      "weighted avg       0.61      0.63      0.60        76\n",
      "\n"
     ]
    }
   ],
   "source": [
    "from sklearn.metrics import classification_report\n",
    "\n",
    "print(classification_report(y_test2, y_pred))"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.8"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
